diff --git a/es-app/src/guis/GuiGameOptions.cpp b/es-app/src/guis/GuiGameOptions.cpp
index 6d52a27..5936c7b 100644
--- a/es-app/src/guis/GuiGameOptions.cpp
+++ b/es-app/src/guis/GuiGameOptions.cpp
@@ -265,45 +265,42 @@ GuiGameOptions::GuiGameOptions(Window* window, FileData* game) : GuiComponent(wi
 		}
 	}
 
-    if (UIModeController::getInstance()->isUIModeFull())
+    mMenu.addGroup(_("SYSTEM"));
+    if (!game->getRunOnBoot())
     {
-        mMenu.addGroup(_("SYSTEM"));
-        if (!game->getRunOnBoot())
+        mMenu.addEntry(_("BOOT TO THIS GAME"), false, [this, game]
         {
-            mMenu.addEntry(_("BOOT TO THIS GAME"), false, [this, game]
-            {
-                std::string system = mSystem->getName();
-                std::string core = mSystem->getCore();
-                std::string emulator = mSystem->getEmulator();
-                std::string launchCmd = mSystem->getLaunchCommand(emulator, core);
-                launchCmd.replace(launchCmd.find("%ROM%"), 5, "\"" + game->getPath() + "\"");
-                launchCmd.replace(launchCmd.find("%SYSTEM%"), 8, system);
-                launchCmd.replace(launchCmd.find("%CORE%"), 6, core);
-                launchCmd.replace(launchCmd.find("%EMULATOR%"), 10, emulator);
-                SystemConf::getInstance()->set("global.bootgame.path", game->getFullPath());
-                SystemConf::getInstance()->set("global.bootgame.cmd", launchCmd);
-                SystemConf::getInstance()->set("global.bootgame.data", game->getName());
-                SystemConf::getInstance()->saveSystemConf();
-                char trstring[1024];
-                snprintf(trstring, 1024, std::string(_("LAUNCH %s WHEN BOOT")).c_str(), game->getName().c_str());
-                mWindow->displayNotificationMessage(trstring, 4000);
-                close();
-            });
-        }
-        else
+            std::string system = mSystem->getName();
+            std::string core = mSystem->getCore();
+            std::string emulator = mSystem->getEmulator();
+            std::string launchCmd = mSystem->getLaunchCommand(emulator, core);
+            launchCmd.replace(launchCmd.find("%ROM%"), 5, "\"" + game->getPath() + "\"");
+            launchCmd.replace(launchCmd.find("%SYSTEM%"), 8, system);
+            launchCmd.replace(launchCmd.find("%CORE%"), 6, core);
+            launchCmd.replace(launchCmd.find("%EMULATOR%"), 10, emulator);
+            SystemConf::getInstance()->set("global.bootgame.path", game->getFullPath());
+            SystemConf::getInstance()->set("global.bootgame.cmd", launchCmd);
+            SystemConf::getInstance()->set("global.bootgame.data", game->getName());
+            SystemConf::getInstance()->saveSystemConf();
+            char trstring[1024];
+            snprintf(trstring, 1024, std::string(_("LAUNCH %s WHEN BOOT")).c_str(), game->getName().c_str());
+            mWindow->displayNotificationMessage(trstring, 4000);
+            close();
+        });
+    }
+    else
+    {
+        mMenu.addEntry(_("CANCEL BOOT TO THIS GAME"), false, [this, game]
         {
-            mMenu.addEntry(_("CANCEL BOOT TO THIS GAME"), false, [this, game]
-            {
-                SystemConf::getInstance()->set("global.bootgame.path", "");
-                SystemConf::getInstance()->set("global.bootgame.cmd", "");
-                SystemConf::getInstance()->set("global.bootgame.data", "");
-                SystemConf::getInstance()->saveSystemConf();
-                char trstring[1024];
-                snprintf(trstring, 1024, std::string(_("CANCEL LAUNCH %s WHEN BOOT")).c_str(), game->getName().c_str());
-                mWindow->displayNotificationMessage(trstring, 4000);
-                close();
-            });
-        }
+            SystemConf::getInstance()->set("global.bootgame.path", "");
+            SystemConf::getInstance()->set("global.bootgame.cmd", "");
+            SystemConf::getInstance()->set("global.bootgame.data", "");
+            SystemConf::getInstance()->saveSystemConf();
+            char trstring[1024];
+            snprintf(trstring, 1024, std::string(_("CANCEL LAUNCH %s WHEN BOOT")).c_str(), game->getName().c_str());
+            mWindow->displayNotificationMessage(trstring, 4000);
+            close();
+        });
     }
 
 	bool isCustomCollection = (mSystem->isCollection() && game->getType() == FOLDER && CollectionSystemManager::get()->isCustomCollection(mSystem->getName()));
